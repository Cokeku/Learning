# -*- coding: utf-8 -*-
# Author: Hao Zhao

"""
线索二叉树：把空的链接加以利用，再指向树的其他节点，而这些链接就称为“线索”，这颗树就称之为线索二叉树

将二叉树转成线索二叉树的过程：
1. 先将二叉树将中序遍历方式按序排出，再将所有空链接改成线索
2. 如果线索链接是指向该节点的左指针，就将该线索指向中序遍历顺序下的前一个节点
3. 如果线索链接是指向该节点的右指针，就将该线索指向中序遍历顺序下的后一个节点
4. 指向一个空节点，并将此空节点的右指针指向自己，而空节点的左子树是此线索二叉树

线索二叉树的基本结构：
| LBIT | LCHIND | DATA | RCHIND | RBIT |
LBIT：左控制位（1：正常指针 0：线索）
LCHIND：左子树链接
DATA：数据
RCHIND：右子树链接
RBIT：左控制位（1：正常指针 0：线索）

线索二叉树的优缺点：
优点：
1. 在二叉树进行中序遍历时，不需要使用堆栈处理，但一般二叉树却需要
2. 由于充分使用空链接，因此遍历链接闲置浪费的情况。另外，中序遍历时的速度也比较快，节省了不少时间
3. 任意一个节点都容易找出它的中序先行者和中序后继者，在中序遍历时不需要使用堆栈或递归

缺点：
1. 在加入或删除节点时的速度比一般二叉树慢
2. 线索子树间不能共用

"""


