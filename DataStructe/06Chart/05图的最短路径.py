# -*- coding: utf-8 -*-
# Author: Hao Zhao

"""
问题：最小成本生成树就是计算连接网络中每个顶点的最少花费，但是两顶点的路径并不一定是一条花费最少的路径
讨论方向：
1. 单点对全部节点
2. 所有顶点对两两之间的最短距离

单点对全部节点的最短：通常使用Dijkstra算法
公式计算：D[I]=min(D[I],D[x]+A[x,I])
D：D为一个N维数组，用来存放某一顶点到其他顶点的最短距离
I：是指x的相邻节点

找出有向图中，单点到全部顶点的最短距离的过程：
1. 以任意一顶点开始，判断该顶点到其他顶点的距离D[I]，第一次无法到达为距离为无穷大
2. 找出值最小的并加入集合S中
3. 按照公式计算：再次判断该顶点到其他顶点的距离D[I],当相邻顶点的最短距离加入到S集合中后，可以使用该顶点
最为中转，找出值最小的并加入集合S中
4. 重复以上步骤，直到所有顶点的最短距离加入到集合S中


两两顶点间的最短路径：通常使用Floyd算法
公式计算：Ak[i][j]=min{A(k-1)[i][j],A(k-1)[i][k]+A(k-1)[k][j]},k>=1 : K为所有顶点的个数
找出有向图中，两两顶点间的最短路径的过程：
1. A0[i][j]=COST[i][j] ： A0为不经过任何顶点的最短成本矩阵
2. A1[i][j]=MIN{A0[i][j],A0[i][1]+A0[1][j]}： A1为经过顶点1的最短成本矩阵
3. A2[i][j]=MIN{A1[i][j],A1[i][2]+A1[2][j]}： A2为经过顶点2的最短成本矩阵
....
最终得到的：A(K)成本矩阵，即各顶点之间的最短路径

"""